name: CI Pipeline - Publish Extent (gh-pages)

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"
  workflow_dispatch:
  schedule:
    - cron: "50 17 * * *"   # daily

permissions:
  contents: write   # allow peaceiris to push to gh-pages

env:
  JAVA_DISTRIBUTION: temurin
  JAVA_VERSION: 24
  WORKDIR: eclipse-workspace/Intro
  ARTIFACT_RETENTION_DAYS: 7

jobs:
  test:
    runs-on: windows-latest
    timeout-minutes: 300

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven

      - name: Print environment info
        shell: bash
        run: |
          echo "Java version:"
          java -version
          echo "Maven version:"
          mvn -v
          echo "Working directory: ${{ env.WORKDIR }}"
          echo "Runner OS: $RUNNER_OS"

      - name: Set RUN_TIMESTAMP (Windows runner)
        id: set_ts
        shell: pwsh
        run: |
          $ts = Get-Date -Format 'yyyy-MM-dd_HH-mm-ss'
          Write-Host "RUN_TIMESTAMP = $ts"
          Add-Content -Path $env:GITHUB_ENV -Value "RUN_TIMESTAMP=$ts"

      - name: Run Maven Tests (enforce logs.dir + runTimestamp)
        working-directory: ${{ env.WORKDIR }}
        shell: bash
        run: |
          # absolute logs folder inside the WORKDIR (so packaging picks it up reliably)
          ABS_LOGS_DIR="${GITHUB_WORKSPACE}/${{ env.WORKDIR }}/logs/run_${{ env.RUN_TIMESTAMP }}"
          echo "Setting logs.dir = $ABS_LOGS_DIR"
          mvn -B -ntp clean test -DrunTimestamp="${{ env.RUN_TIMESTAMP }}" -Dlogs.dir="$ABS_LOGS_DIR" | tee mvn-output.txt
          tail -n 200 mvn-output.txt || true

      - name: Debug - verify created logs and artifact layout (non-failing)
        working-directory: ${{ env.WORKDIR }}
        shell: bash
        run: |
          echo "RUN_TIMESTAMP = $RUN_TIMESTAMP"
          echo "Working dir = $(pwd)"
          echo "Absolute logs dir we intended:"
          echo "${GITHUB_WORKSPACE}/${{ env.WORKDIR }}/logs/run_${{ env.RUN_TIMESTAMP }}"
          echo "List logs under WORKDIR/logs:"
          ls -la logs || true
          echo "Find any run_* folders under WORKDIR:"
          find . -maxdepth 6 -type d -name 'run_*' -print || true
          echo "List test-output/ExtentReports:"
          ls -la test-output/ExtentReports || true
          echo "Show artifacts/extent (pre-packaging) if present:"
          ls -la artifacts/extent || true

      - name: Package Extent Report bundle with screenshots and logs
        if: always()
        shell: bash
        working-directory: ${{ env.WORKDIR }}
        run: |
          set -euo pipefail
          rm -rf artifacts/extent
          mkdir -p artifacts/extent

          # Copy ExtentReports folder if present
          if [ -d "test-output/ExtentReports" ]; then
            cp -r test-output/ExtentReports artifacts/extent/ExtentReports
          fi

          # Copy screenshots if present
          if [ -d "test-output/screenshots" ]; then
            cp -r test-output/screenshots artifacts/extent/screenshots
          fi

          # Copy only the logs for this run (logs/run_<timestamp>) into the deployed folder
          mkdir -p artifacts/extent/logs
          if [ -d "logs/run_${RUN_TIMESTAMP}" ]; then
            cp -r "logs/run_${RUN_TIMESTAMP}" artifacts/extent/logs/
          else
            # fallback: copy any run_* (non-fatal)
            cp -r logs/run_* artifacts/extent/logs/ || true
          fi

          # Create a convenience index that redirects to the Extent report
          cat > artifacts/extent/index.html <<'HTML'
          <!doctype html>
          <html>
          <head><meta charset="utf-8"><meta http-equiv="refresh" content="0; url=ExtentReports/ExtentReport.html"><title>Latest Test Report</title></head>
          <body>If you are not redirected, <a href="ExtentReports/ExtentReport.html">open the report</a>.</body>
          </html>
          HTML

      - name: Upload Extent Report Bundle (HTML + screenshots + logs)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: extent-report-bundle
          path: ${{ env.WORKDIR }}/artifacts/extent
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
          if-no-files-found: warn

      - name: Deploy Extent Report to GitHub Pages (gh-pages)
        if: always()
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # use absolute path to avoid OS/working-dir ambiguity
          publish_dir: ${{ github.workspace }}/${{ env.WORKDIR }}/artifacts/extent
          publish_branch: gh-pages
          keep_files: false
          user_name: "github-actions[bot]"
          user_email: "github-actions[bot]@users.noreply.github.com"
          commit_message: "ci: publish extent report and assets (${{ env.RUN_TIMESTAMP }}) [skip ci]"

      - name: Upload Raw Logs (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: framework-logs
          path: |
            ${{ env.WORKDIR }}/logs
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
          if-no-files-found: ignore

      - name: Notify Discord ‚Äì End of Test (optional)
        if: always()
        shell: bash
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          runUrl="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          artifactUrl="${runUrl}#artifacts"
          status="${{ job.status }}"
          if [ "$status" = "success" ]; then status_emoji="‚úÖ"; elif [ "$status" = "failure" ]; then status_emoji="‚ùå"; else status_emoji="‚ö†Ô∏è"; fi
          commit_short="${{ github.sha }}"
          branch="${{ github.ref_name }}"
          actor="${{ github.actor }}"
          timestamp=$(TZ='Asia/Kolkata' date +"%Y-%m-%d %I:%M %p IST")
          pagesUrl="https://sagarjhathi.github.io/amazon-filter-e2e-automation/"
          curl -H "Content-Type: application/json" -X POST -d "{\"content\": \"$status_emoji **CI Pipeline - ${{ github.job }}** ($branch): $status\\nüë§ Triggered by: $actor\\nüîñ Commit: \`$commit_short\`\\nüïí Completed at: $timestamp\\nüîó [View Run]($runUrl)\\nüì¶ [Download Extent Report & Artifacts]($artifactUrl)\\nüåê [Open Latest Report on GitHub Pages]($pagesUrl)\"}" "$DISCORD_WEBHOOK" || true
