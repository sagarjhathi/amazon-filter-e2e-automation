name: CI Pipeline

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"
  workflow_dispatch:
  schedule:
    - cron: "50 17 * * *"   # 11:20 PM IST daily

permissions:
  contents: write

env:
  JAVA_DISTRIBUTION: temurin
  JAVA_VERSION: 24
  WORKDIR: eclipse-workspace/Intro
  ARTIFACT_RETENTION_DAYS: 7

jobs:
  test:
    runs-on: windows-latest
    timeout-minutes: 300
    env:
      REPORT_BASE: "/amazon-filter-e2e-automation/"

    steps:
      # ‚úÖ Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      # ‚úÖ Set up Java
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven

      # ‚úÖ Cache dependencies
      - name: Cache Maven target and .m2 repo
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
            ${{ env.WORKDIR }}/target
          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-${{ runner.os }}-

      # ‚úÖ Print environment info
      - name: Print environment info
        shell: bash
        run: |
          echo "Java version:"; java -version
          echo "Maven version:"; mvn -v
          echo "Working directory: ${{ env.WORKDIR }}"
          echo "Runner OS: $RUNNER_OS"

      # ‚úÖ Discord notification start
      - name: Notify Discord ‚Äì Start of Test
        if: always()
        shell: bash
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          runUrl="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          timestamp=$(TZ='Asia/Kolkata' date +"%Y-%m-%d %I:%M %p IST")
          actor="${{ github.actor }}"
          branch="${{ github.ref_name }}"
          job_name="${{ github.job }}"
          curl -H "Content-Type: application/json" -X POST -d "{\"content\": \"üöÄ **CI Test Started - $job_name**\\nüë§ Triggered by: $actor\\nüåø Branch: $branch\\nüïí Start Time: $timestamp\\nüîó [View Run]($runUrl)\"}" "$DISCORD_WEBHOOK"

      # ‚úÖ Timestamp for logs/report
      - name: Set RUN_TIMESTAMP
        id: set_ts
        shell: pwsh
        run: |
          $ts = Get-Date -Format 'yyyy-MM-dd_HH-mm-ss'
          Write-Host "RUN_TIMESTAMP = $ts"
          Add-Content -Path $env:GITHUB_ENV -Value "RUN_TIMESTAMP=$ts"

      # ‚úÖ Run Tests
      - name: Run Maven Tests
        working-directory: ${{ env.WORKDIR }}
        shell: bash
        run: |
          ABS_LOGS_DIR="${GITHUB_WORKSPACE}/${{ env.WORKDIR }}/logs/run_${{ env.RUN_TIMESTAMP }}"
          echo "Setting logs.dir = $ABS_LOGS_DIR"
          mvn -B -ntp clean test -DrunTimestamp="${{ env.RUN_TIMESTAMP }}" -Dlogs.dir="$ABS_LOGS_DIR"

      # ‚úÖ Package reports, logs, screenshots into artifacts/extent
      - name: Package Extent Report bundle
        if: always()
        shell: bash
        working-directory: ${{ env.WORKDIR }}
        run: |
          mkdir -p artifacts/extent
          if [ -d "test-output/ExtentReports" ]; then
            cp -r test-output/ExtentReports artifacts/extent/ExtentReports
          fi
          if [ -d "test-output/screenshots" ]; then
            cp -r test-output/screenshots artifacts/extent/screenshots
          fi
          if [ -d "logs" ]; then
            cp -r logs artifacts/extent/logs
          fi
          echo "<html><body><h3>Artifacts</h3><ul><li><a href='ExtentReports/ExtentReport.html'>Open Extent Report</a></li></ul></body></html>" > artifacts/extent/index.html

      # ‚úÖ Upload artifacts for debugging / history
      - name: Upload Extent Report Bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: extent-report-bundle
          path: ${{ env.WORKDIR }}/artifacts/extent
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
          if-no-files-found: warn

      # ‚úÖ Deploy per-run report to gh-pages/runs/<timestamp>
      - name: Deploy run report (preserve history)
        if: ${{ always() && github.ref != 'refs/heads/gh-pages' }}
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ${{ github.workspace }}/${{ env.WORKDIR }}/artifacts/extent
          publish_branch: gh-pages
          destination_dir: runs/${{ env.RUN_TIMESTAMP }}
          keep_files: true
          user_name: "github-actions[bot]"
          user_email: "github-actions[bot]@users.noreply.github.com"
          commit_message: "ci: publish run ${{ env.RUN_TIMESTAMP }} (preserve history) [skip ci]"

      # ‚úÖ Update root index + history + clean legacy
      - name: Rewrite root (index + history) and clean legacy
        if: ${{ always() && github.ref != 'refs/heads/gh-pages' }}
        shell: bash
        run: |
          set -euo pipefail
          REPO="${GITHUB_REPOSITORY}"
          OWNER="${REPO%/*}"
          NAME="${REPO#*/}"
          TS="${RUN_TIMESTAMP}"
          TMP="$(mktemp -d)"

          git -C "$TMP" init >/dev/null
          git -C "$TMP" remote add origin "https://github.com/${REPO}.git"
          git -C "$TMP" fetch origin gh-pages || true
          if git -C "$TMP" show-ref --verify --quiet refs/remotes/origin/gh-pages; then
            git -C "$TMP" checkout -q gh-pages
          else
            git -C "$TMP" checkout -q --orphan gh-pages
          fi

          # Clean legacy folders once
          rm -rf "$TMP/ExtentReports" "$TMP/logs" "$TMP/screenshots" || true

          LATEST_URL="https://${OWNER}.github.io/${NAME}/runs/${TS}/ExtentReports/ExtentReport.html"

          cat > "$TMP/index.html" <<EOF
          <!doctype html><meta charset="utf-8">
          <meta http-equiv="refresh" content="0; url=${LATEST_URL}">
          <title>Opening Latest Report</title>
          <p><a href="${LATEST_URL}">Open latest report</a></p>
          <p>Or see <a href="./history.html">Run History</a>.</p>
          EOF

          {
            echo "<!doctype html><meta charset='utf-8'><title>Automation Report History</title>"
            echo "<h1>Automation Report History</h1>"
            echo "<p>Latest: <a href='${LATEST_URL}'>${TS}</a></p>"
            echo "<h2>Runs</h2><ul>"
            if [ -d "$TMP/runs" ]; then
              ls -1 "$TMP/runs" | sort -r | while read -r d; do
                echo "<li><a href='/${NAME}/runs/${d}/ExtentReports/ExtentReport.html'>${d}</a></li>"
              done
            fi
            echo "</ul>"
          } > "$TMP/history.html"

          git -C "$TMP" add -A
          git -C "$TMP" -c user.name="github-actions[bot]" -c user.email="github-actions[bot]@users.noreply.github.com" \
            commit -m "ci: update index & history for run ${TS}" || true
          git -C "$TMP" push origin gh-pages

      # ‚úÖ Upload logs (for reference)
      - name: Upload Raw Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: framework-logs
          path: ${{ env.WORKDIR }}/logs
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
          if-no-files-found: ignore

      # ‚úÖ Discord notification end
      - name: Notify Discord ‚Äì End of Test
        if: always()
        shell: bash
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          runUrl="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          artifactUrl="${runUrl}#artifacts"
          status="${{ job.status }}"
          if [ "$status" = "success" ]; then
            emoji="‚úÖ"
          elif [ "$status" = "failure" ]; then
            emoji="‚ùå"
          else
            emoji="‚ö†Ô∏è"
          fi
          commit_short="${{ github.sha }}" && commit_short=${commit_short:0:7}
          branch="${{ github.ref_name }}"
          actor="${{ github.actor }}"
          timestamp=$(TZ='Asia/Kolkata' date +"%Y-%m-%d %I:%M %p IST")
          pagesUrl="https://${{ github.repository_owner }}.github.io/amazon-filter-e2e-automation/"
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\": \"$emoji **CI Pipeline** ($branch): $status\\nüë§ Triggered by: $actor\\nüîñ Commit: \`$commit_short\`\\nüïí Completed: $timestamp\\nüîó [Run Details]($runUrl)\\nüì¶ [Artifacts]($artifactUrl)\\nüåê [Latest Report]($pagesUrl)\"}" \
               "$DISCORD_WEBHOOK"
