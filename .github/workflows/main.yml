name: CI Pipeline

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"
  workflow_dispatch:
  schedule:
    - cron: "50 17 * * *"   # 11:20 PM IST daily

permissions:
  contents: write   # ‚úÖ allow pushing index.html back to repo

env:
  JAVA_DISTRIBUTION: temurin
  JAVA_VERSION: 24
  WORKDIR: eclipse-workspace/Intro
  ARTIFACT_RETENTION_DAYS: 7

jobs:
  test:
    runs-on: windows-latest
    timeout-minutes: 300

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true   # ‚úÖ ensures GITHUB_TOKEN is kept for pushing

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven

      - name: Cache Maven target and .m2 repo (optional)
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
            ${{ env.WORKDIR }}/target
          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-${{ runner.os }}-

      - name: Print environment info
        shell: bash
        run: |
          echo "Java version:"
          java -version
          echo "Maven version:"
          mvn -v
          echo "Working directory: ${{ env.WORKDIR }}"
          echo "Runner OS: $RUNNER_OS"

      - name: Notify Discord ‚Äì Start of Test
        if: always()
        shell: bash
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          runUrl="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          timestamp=$(TZ='Asia/Kolkata' date +"%Y-%m-%d %I:%M %p IST")
          actor="${{ github.actor }}"
          branch="${{ github.ref_name }}"
          job_name="${{ github.job }}"

          curl -H "Content-Type: application/json" -X POST -d "{\"content\": \"üöÄ **CI Test Started - $job_name**\\nüë§ Triggered by: $actor\\nüåø Branch: $branch\\nüïí Start Time: $timestamp\\nüîó [View Run]($runUrl)\"}" "$DISCORD_WEBHOOK"


      - name: Set RUN_TIMESTAMP (Windows runner)
        id: set_ts
        shell: pwsh
        run: |
          # produce format yyyy-MM-dd_HH-mm-ss (matches local format)
          $ts = Get-Date -Format 'yyyy-MM-dd_HH-mm-ss'
          Write-Host "RUN_TIMESTAMP = $ts"
          # export to GITHUB_ENV for subsequent steps
          Add-Content -Path $env:GITHUB_ENV -Value "RUN_TIMESTAMP=$ts"

      - name: Run Maven Tests
        working-directory: ${{ env.WORKDIR }}
        shell: bash
        run: |
            ABS_LOGS_DIR="${GITHUB_WORKSPACE}/${{ env.WORKDIR }}/logs/run_${{ env.RUN_TIMESTAMP }}"
            echo "Setting logs.dir = $ABS_LOGS_DIR"
            mvn -B -ntp clean test -DrunTimestamp="${{ env.RUN_TIMESTAMP }}" -Dlogs.dir="$ABS_LOGS_DIR"


      


      # - name: Copy ExtentReport and publish to GitHub Pages
      #   if: always()
      #   shell: bash
      #   working-directory: ${{ env.WORKDIR }}
      #   run: |
      #     set -euo pipefail

      #     REPORT_SRC="test-output/ExtentReports/ExtentReport.html"
      #     REPO_ROOT="$GITHUB_WORKSPACE"

      #     if [ ! -f "$REPORT_SRC" ]; then
      #       echo "No ExtentReport found at $REPORT_SRC"
      #       exit 0
      #     fi

      #     echo "Copying report from $REPORT_SRC to $REPO_ROOT/index.html"
      #     cp "$REPORT_SRC" "$REPO_ROOT/index.html"

      #     cd "$REPO_ROOT"

      #     git config user.name "github-actions"
      #     git config user.email "actions@github.com"

      #     git add index.html
      #     git commit -m "Publish ExtentReport [skip ci]" || echo "No changes to commit"
      #     git push origin HEAD




      - name: Copy ExtentReport and publish to gh-pages
        if: ${{ always() && github.ref != 'refs/heads/gh-pages' }}
        shell: bash
        working-directory: ${{ env.WORKDIR }}
        run: |
          set -euo pipefail

          REPORT_SRC="test-output/ExtentReports/ExtentReport.html"
          if [ ! -f "$REPORT_SRC" ]; then
            echo "No ExtentReport found at $REPORT_SRC ‚Äî skipping publish"
            exit 0
          fi

          echo "Copying report to gh-pages branch..."

          # Move to repo root
          cd "$GITHUB_WORKSPACE"

          # Configure git identity
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Fetch gh-pages branch and check it out
          git fetch origin gh-pages
          git checkout gh-pages

          # Copy Extent report to index.html
          cp "${{ env.WORKDIR }}/$REPORT_SRC" "index.html"

          # Commit and push only index.html
          git add index.html
          git commit -m "Publish ExtentReport [skip ci]" || echo "No changes to commit"
          git push origin gh-pages

          # Go back to original branch (so the workflow stays clean)
          git checkout -

      - name: Package Extent Report bundle with screenshots and logs
        if: always()
        shell: bash
        working-directory: ${{ env.WORKDIR }}
        run: |
          mkdir -p artifacts/extent
          if [ -d "test-output/ExtentReports" ]; then
            cp -r test-output/ExtentReports artifacts/extent/ExtentReports
          fi
          if [ -d "test-output/screenshots" ]; then
            cp -r test-output/screenshots artifacts/extent/screenshots
          fi
          if [ -d "logs" ]; then
            cp -r logs artifacts/extent/logs
          fi
          echo "<html><body><h3>Artifacts</h3><ul><li><a href='ExtentReports/ExtentReport.html'>Open Extent Report</a></li></ul></body></html>" > artifacts/extent/index.html


    


      - name: Upload Extent Report Bundle (HTML + screenshots + logs)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: extent-report-bundle
          path: ${{ env.WORKDIR }}/artifacts/extent
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
          if-no-files-found: warn



      - name: Upload Extent Report Bundle (HTML + screenshots + logs)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: extent-report-bundle
          path: ${{ env.WORKDIR }}/artifacts/extent
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
          if-no-files-found: warn

      - name: Deploy to gh-pages (safe)
        if: ${{ always() && github.ref != 'refs/heads/gh-pages' }}
        shell: bash
        run: |
          # sanity: ensure folder exists before running deploy action
          PUBLISH_DIR="${GITHUB_WORKSPACE}/${{ env.WORKDIR }}/artifacts/extent"
          if [ ! -d "$PUBLISH_DIR" ]; then
            echo "Publish dir not found: $PUBLISH_DIR ‚Äî skipping deploy"
            exit 0
          fi
        # The next step is the deploy action which will actually push the folder
      - name: Deploy to gh-pages (action)
        if: ${{ always() && github.ref != 'refs/heads/gh-pages' }}
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ${{ github.workspace }}/${{ env.WORKDIR }}/artifacts/extent
          publish_branch: gh-pages
          keep_files: false
          user_name: "github-actions[bot]"
          user_email: "github-actions[bot]@users.noreply.github.com"
          commit_message: "ci: publish extent report (${{ env.RUN_TIMESTAMP }}) [skip ci]"

      
 
      - name: Upload Raw Logs (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: framework-logs
          path: |
            ${{ env.WORKDIR }}/logs
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
          if-no-files-found: ignore

      - name: Notify Discord ‚Äì End of Test
        if: always()
        shell: bash
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          runUrl="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          artifactUrl="${runUrl}#artifacts"
          status="${{ job.status }}"

          if [ "$status" = "success" ]; then
            status_emoji="‚úÖ"
          elif [ "$status" = "failure" ]; then
            status_emoji="‚ùå"
          else
            status_emoji="‚ö†Ô∏è"
          fi

          commit_sha="${{ github.sha }}"
          commit_short="${commit_sha:0:7}"
          branch="${{ github.ref_name }}"
          actor="${{ github.actor }}"
          timestamp=$(TZ='Asia/Kolkata' date +"%Y-%m-%d %I:%M %p IST")

          pagesUrl="https://sagarjhathi.github.io/amazon-filter-e2e-automation/"

          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\": \"$status_emoji **CI Pipeline - ${{ github.job }}** ($branch): $status\\nüë§ Triggered by: $actor\\nüîñ Commit: \`$commit_short\`\\nüïí Completed at: $timestamp\\nüîó [View Full Run Details]($runUrl)\\nüì¶ [Download Extent Report & Artifacts]($artifactUrl)\\nüåê [Open Latest Report on GitHub Pages]($pagesUrl)\"}" \
               "$DISCORD_WEBHOOK"


   

         
      

    